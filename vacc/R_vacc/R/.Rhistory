library(dplyr)
library(lubridate)
library(ggplot2)
# library(forecast)
# create list of monthly TrustReporter files
# setwd("./Reports")
theme_set(theme_minimal())
load_statements <- function(fdir) {
file_list <- list.files(fdir)
chart <- data.frame() #empty data frame
#iterate over file list taking two cells from row 20 of each document
#(date and portfolio value)
for (i in 1:length(file_list)){
fname <- paste(fdir, file_list[i], sep = "")
temp <- read.csv(fname, header = FALSE, stringsAsFactors = FALSE)
date <- mdy(temp$V2[4])
v <- temp$V3[temp$V1 == "Total Portfolio Value"]
port_value <- as.numeric(gsub(",", "", v[length(v)]))
df <- data.frame(date, port_value)
chart <- rbind(chart, df)
}
chart %>%
tidyr::drop_na() %>%
distinct()
}
chart <- load_statements("./Reports/")
View(chart)
library(dplyr)
library(lubridate)
library(ggplot2)
# library(forecast)
# create list of monthly TrustReporter files
# setwd("./Reports")
theme_set(theme_minimal())
load_statements <- function(fdir) {
file_list <- list.files(fdir)
chart <- data.frame() #empty data frame
#iterate over file list taking two cells from row 20 of each document
#(date and portfolio value)
for (i in 1:length(file_list)){
fname <- paste(fdir, file_list[i], sep = "")
temp <- read.csv(fname, header = FALSE, stringsAsFactors = FALSE)
date <- mdy(temp$V2[4])
v <- temp$V3[temp$V1 == "Total Portfolio Value"]
port_value <- as.numeric(gsub(",", "", v[length(v)]))
df <- data.frame(date, port_value)
chart <- rbind(chart, df)
}
chart %>%
tidyr::drop_na() %>%
distinct()
}
chart <- load_statements("./Reports/")
annual_return <- chart %>%
group_by(year = year(date)) %>%
summarize(end_val = port_value[which.max(date)], .groups = "keep") %>%
ungroup() %>%
mutate(
percent_gain = (end_val / lag(end_val) - 1) * 100,
value_gain = scales::dollar((end_val - lag(end_val))),
end_val = scales::dollar(end_val)
)
annual_return
mean(annual_return$percent_gain, na.rm = TRUE)
chart %>%
group_by(year = year(date), quarter = quarter(date)) %>%
summarize(end_val = port_value[which.max(date)], .groups = "keep") %>%
ungroup() %>%
mutate(
percent_gain = (end_val / lag(end_val) - 1) * 100,
value_gain = scales::dollar((end_val - lag(end_val))),
end_val = scales::dollar(end_val)
)
ggplot(chart, aes(x = date, y = port_value)) +
geom_line()
lm_fit <- lm(log(port_value) ~ date, data = chart)
summary(lm_fit)
nyears <- 20
ndays <- nyears * 365
date <- seq(max(chart$date), max(chart$date) + ndays, by = "months")
pred_df <- data.frame(log_predict = predict.lm(lm_fit, newdata = date))
pred_df <- cbind(date, pred_df)
pred_df$port_value <- exp(pred_df$log_predict)
pred_df$log_predict <- NULL
pred_df$predicted <- "predicted"
chart$predicted <- "actual"
df <- rbind(pred_df, chart)
ggplot(df, aes(as.Date(date), y = port_value, color = predicted)) +
geom_line() +
scale_y_continuous(labels = scales::dollar_format()) +
labs(x = "",
y = "value",
color = "")
dob <- as.Date("1994-12-16")
df %>%
group_by(year(date)) %>%
filter(date == max(date) & date >= Sys.Date()) %>%
ungroup() %>%
select(date, port_value) %>%
mutate(
age = floor(interval(dob, date)/years(1)),
port_value = scales::dollar(port_value)
) %>%
arrange(age)
library(tsfgrnn)
install.packages("tsfgrnn")
library(tsfgrnn)
grnn_forecasting(df)
ts(df)
grnn_forecasting(ts(df))
grnn_forecasting(ts(df), h = 5)
df %>%
select(-predicted) %>%
grnn_forecasting(ts(.), h = 3)
df %>%
select(-predicted) %>%
ts() %>%
grnn_forecasting(h = 3)
df_ts <- select(-predicted) %>% ts()
df_ts <-df %>% select(-predicted) %>% ts()
grnn_forecasting(df_ts, h = 3)
df_ts
grnn_forecasting(UKgas)
grnn_forecasting(UKgas, h = 3)
UKgas
class(UKgas)
UKgas
df_ts <- df %>% select(-predicted) %>% ts()
df_ts
class(df_ts)
df_ts <- df %>% select(-predicted) %>% ts(class = "ts")
class(df_ts)
df_ts
grnn_forecasting(df_ts, h = 3)
grnn_forecasting(df_ts, h = 5)
ts(1:8)
df_ts <- df %>% select(-predicted)
rownames(df_ts) <- df_ts$date
rownames(df_ts)
df %>% select(-predicted)
chart
chart %>%
distinct() %>%
tibble::column_to_rownames(date)
chart %>%
distinct() %>%
tibble::column_to_rownames()
chart %>%
distinct()
chart %>%
distinct() %>%
tibble::column_to_rownames(date)
chart %>%
distinct() %>%
tibble::column_to_rownames("date")
chart %>%
distinct() %>%
tibble::column_to_rownames("date") %.%
select(-predicted)
chart %>%
distinct() %>%
tibble::column_to_rownames("date") %>%
select(-predicted)
chart_ts <- chart %>%
distinct() %>%
tibble::column_to_rownames("date") %>%
select(-predicted) %>%
ts()
grnn_forecasting(chart_ts, h = 5)
summary(chart_pred)
chart_pred <- grnn_forecasting(chart_ts, h = 5)
summary(chart_pred)
autoplot(chart_pred)
chart %>%
distinct() %>%
tibble::column_to_rownames("date")
chart %>%
distinct() %>%
arrange(date) %>%
tibble::column_to_rownames("date")
library(tsfgrnn)
chart_ts <- chart %>%
distinct() %>%
arrange(date) %>%
tibble::column_to_rownames("date") %>%
select(-predicted) %>%
ts()
# ts(1:8)
chart_pred <- grnn_forecasting(chart_ts, h = 5)
autoplot(chart_pred)
library(tsfgrnn)
chart_ts <- chart %>%
distinct() %>%
arrange(date) %>%
tibble::column_to_rownames("date") %>%
select(-predicted) %>%
ts()
# ts(1:8)
chart_pred <- grnn_forecasting(chart_ts, h = 20)
autoplot(chart_pred)
install.packages("tabulizer")
install.packages("tabulizer")
remotes::install_github(c("ropensci/tabulizerjars", "ropensci/tabulizer"))
install.packages("ciftiTools")
library(ciftiTools)
library(ciftiTools)
fpath <- "../data/"
list.files(fpath)
fpath <- "../data/"
f_list <- list.files(fpath)
cifti_fname <- ciftiTools::ciftiTools.files()$cifti["dtseries"]
surfL_fname <- ciftiTools.files()$surf["left"]
surfR_fname <- ciftiTools.files()$surf["right"]
xii <- read_cifti(
cifti_fname, brainstructures="all",
surfL_fname=surfL_fname, surfR_fname=surfR_fname,
resamp_res=4000
)
library(ciftiTools)
ciftiTools.setOption("wb_path", "/Applications/workbench/bin_macosx64")
cifti_fname <- ciftiTools::ciftiTools.files()$cifti["dtseries"]
surfL_fname <- ciftiTools.files()$surf["left"]
surfR_fname <- ciftiTools.files()$surf["right"]
xii <- read_cifti(
cifti_fname, brainstructures="all",
surfL_fname=surfL_fname, surfR_fname=surfR_fname,
resamp_res=4000
)
cifti_fname <- ciftiTools::ciftiTools.files()$cifti["dtseries"]
surfL_fname <- ciftiTools.files()$surf["left"]
surfR_fname <- ciftiTools.files()$surf["right"]
xii <- read_cifti(
cifti_fname, brainstructures="all",
surfL_fname=surfL_fname, surfR_fname=surfR_fname,
resamp_res=4000
)
view_xifti_surface(xii) # or plot(xii)
view_xifti_volume(xii)
cortexL <- xii$data$cortex_left
cortexL_mwall <- xii$meta$medial_wall_mask$left
cortexR <- xii$data$cortex_right
cortexR_mwall <- xii$meta$medial_wall_mask$right
# subcortVol <- xii$data$subcort
# subcortLabs <- xii$meta$subcort$labels
# subcortMask <- xii$meta$subcort$mask
surfL <- xii$surf$cortex_left
surfR <- xii$surf$cortex_right
xii$meta$cifti$time_start
select_xifti(xii)
select_xifti(xii, idx=1)
select_xifti(xii, idx=0)
select_xifti(xii, idx=2)
select_xifti(xii, idx=3)
select_xifti(xii, idx=1)
t <- select_xifti(xii, idx=1)
t <- select_xifti(xii, idx=1)
t$data
t <- select_xifti(xii, idx=2)
t$data
t <- select_xifti(xii, idx=2)
summary(t)
# cifti_fname <- ciftiTools::ciftiTools.files()$cifti["dtseries"]
cifti_fname <- read_xifti(f_list[1])
fpath <- "../data/"
f_list <- list.files(fpath, full.names = TRUE)
# cifti_fname <- ciftiTools::ciftiTools.files()$cifti["dtseries"]
cifti_fname <- read_xifti(f_list[1])
surfL_fname <- ciftiTools.files()$surf["left"]
surfR_fname <- ciftiTools.files()$surf["right"]
xii <- read_cifti(
cifti_fname, brainstructures="all",
surfL_fname=surfL_fname, surfR_fname=surfR_fname,
resamp_res=4000
)
# cifti_fname <- ciftiTools::ciftiTools.files()$cifti["dtseries"]
cifti_fname <- f_list[1]
surfL_fname <- cifti_fname$surf["left"]
surfL_fname <- cifti_fname$surf["left"]
# cifti_fname <- ciftiTools::ciftiTools.files()$cifti["dtseries"]
cifti_fname <- f_list[1]
# surfL_fname <- cifti_fname$surf["left"]
# surfR_fname <- cifti_fname$surf["right"]
#
# xii <- read_cifti(
#   cifti_fname, brainstructures="all",
#   surfL_fname=surfL_fname, surfR_fname=surfR_fname,
#   resamp_res=4000
# )
xii <- read_cifti(cifti_fname)
view_xifti_surface(xii) # or plot(xii)
cortexL <- xii$data$cortex_left
cortexL_mwall <- xii$meta$medial_wall_mask$left
cortexR <- xii$data$cortex_right
cortexR_mwall <- xii$meta$medial_wall_mask$right
# subcortVol <- xii$data$subcort
# subcortLabs <- xii$meta$subcort$labels
# subcortMask <- xii$meta$subcort$mask
surfL <- xii$surf$cortex_left
surfR <- xii$surf$cortex_right
t <- select_xifti(xii, idx=1)
summary(t)
View(xii)
t <- select_xifti(xii, idx=2)
summary(t)
t <- select_xifti(xii, idx=3)
summary(t)
t <- select_xifti(xii, idx=4)
summary(t)
t <- select_xifti(xii, idx=10)
summary(t)
t <- select_xifti(xii, idx=100)
summary(t)
t <- select_xifti(xifti, idx = 1:10)
t <- select_xifti(xii, idx = 1:10)
summary(t)
fpath <- "../data"
fpath <- "../data/age_wide.csv"
df <- read.csv(fpath)
setwd("~/Documents/phd/projects/resources/vacc/R_vacc/R")
df <- read.csv(fpath)
df <- read.csv(fpath)
df
df %>%
tidyr::pivot_longer(
cols = starts_with("age"),
names_to = "timepoint",
values_to = "age"
)
library(dplyr)
df %>%
tidyr::pivot_longer(
cols = starts_with("age"),
names_to = "timepoint",
values_to = "age"
)
# create long-format data
df %>%
tidyr::pivot_longer(
cols = starts_with("age"),
names_to = "timepoint",
names_pattern = '(\\d+)'
values_to = "age"
# create long-format data
df %>%
tidyr::pivot_longer(
cols = starts_with("age"),
names_to = "timepoint",
names_pattern = '(\\d+)',
values_to = "age"
)
df %>%
tidyr::pivot_longer(
cols = starts_with("age"),
names_to = "timepoint",
names_pattern = '_+',
values_to = "age"
)
# create long-format data
df %>%
tidyr::pivot_longer(
cols = starts_with("age"),
names_to = "timepoint",
names_pattern = '_',
values_to = "age"
)
# create long-format data
df %>%
tidyr::pivot_longer(
cols = starts_with("age"),
names_to = "timepoint",
names_pattern = '_.*$'
values_to = "age"
df %>%
tidyr::pivot_longer(
cols = starts_with("age"),
names_to = "timepoint",
names_pattern = '_.*$',
values_to = "age"
)
# create long-format data
df %>%
tidyr::pivot_longer(
cols = starts_with("age"),
names_to = "timepoint",
names_pattern = '[^,]*$',
values_to = "age"
)
# create long-format data
df %>%
tidyr::pivot_longer(
cols = starts_with("age"),
names_to = "timepoint",
names_pattern = '[^_]*$',
values_to = "age"
)
df %>%
tidyr::pivot_longer(
cols = starts_with("age"),
names_to = "timepoint",
names_pattern = '(_+)',
values_to = "age"
)
df %>%
tidyr::pivot_longer(
cols = starts_with("age"),
names_to = "timepoint",
names_pattern = '(_+$)',
values_to = "age"
)
# create long-format data
df %>%
tidyr::pivot_longer(
cols = starts_with("age"),
names_to = "timepoint",
names_pattern = '(_+*$)',
values_to = "age"
)
# create long-format data
df %>%
tidyr::pivot_longer(
cols = starts_with("age"),
names_to = "timepoint",
names_pattern = '(_+*)',
values_to = "age"
)
# create long-format data
df %>%
tidyr::pivot_longer(
cols = starts_with("age"),
names_to = "timepoint",
names_pattern = '(_+$)',
values_to = "age"
)
df %>%
tidyr::pivot_longer(
cols = starts_with("age"),
names_to = "timepoint",
names_pattern = '\\b\\w+$',
values_to = "age"
)
df %>%
tidyr::pivot_longer(
cols = starts_with("age"),
names_to = "timepoint",
names_pattern = '.*_',
values_to = "age"
)
df %>%
tidyr::pivot_longer(
cols = starts_with("age"),
names_to = "timepoint",
names_pattern = '.* _',
values_to = "age"
)
df %>%
tidyr::pivot_longer(
cols = starts_with("age"),
names_to = "timepoint",
names_pattern = '.*',
values_to = "age"
)
df %>%
tidyr::pivot_longer(
cols = starts_with("age"),
names_to = "timepoint",
names_pattern = '_.*',
values_to = "age"
)
df %>%
tidyr::pivot_longer(
cols = starts_with("age"),
names_to = "timepoint",
names_pattern = '.*?_',
values_to = "age"
)
# create long-format data
df %>%
tidyr::pivot_longer(
cols = starts_with("age"),
names_to = "timepoint",
names_pattern = '_',
values_to = "age"
)
df %>%
tidyr::pivot_longer(
cols = starts_with("age"),
names_to = "timepoint",
values_to = "age"
)
# Example Rscript
# Tony Barrows
# 20230309
library(dplyr)
reshape_age <- fuction(fpath) {
# Example Rscript
# Tony Barrows
# 20230309
library(dplyr)
reshape_age <- function(fpath) {
df <- read.csv(fpath)
# create long-format data
df_long <- df %>%
tidyr::pivot_longer(
cols = starts_with("age"),
names_to = "timepoint",
values_to = "age"
)
return (df_long)
}
# main
age_reshaped <- reshape_age("../data/age_wide.csv") # use relative paths
write.csv(age_reshaped, "../out/age_reshaped.csv", row.names = FALSE)
